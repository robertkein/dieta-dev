<?php

/**
 * @file
 * Install, update and uninstall functions for the dieta_recipe module.
 */


/**
 * Implementation of hook_uninstall().
 * Automatically drops tables in hook_schema.
 */
function dieta_recipe_uninstall() {

  // remove node revisions
  db_query('DELETE FROM {node_revision} WHERE nid in (select nid from {node} WHERE type = :type)', array(':type' => 'dieta_recipe'));
  // remove recipe nodes
  db_query('DELETE FROM {node} WHERE type = :type', array(':type' => 'dieta_recipe'));

  // remove variables
  db_query('DELETE FROM {variable} WHERE name like :type', array(':type' => 'dieta_recipe_%'));
}


/**
* Implementation of hook_schema().
*/
function dieta_recipe_schema() {
  $schema['dieta_recipe'] = array(
    'fields' => array(
      'nid' => array(
        'description' => 'The primary identifier for a dieta recipe.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'source' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 255,
      ),
      'yield' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'yield_unit' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The units for the yield field(servings, people, cans, cookies, etc).',
      ),
      'description' => array(
        'type' => 'text',
      ),
      'instructions' => array(
        'type' => 'text',
      ),
      'notes' => array(
        'type' => 'text',
      ),
      'preptime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'cooktime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['dieta_recipe_node_ingredient'] = array(
    'description' => 'The base table for dieta recipe ingredients.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a dieta recipe ingredient.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'unit_key' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Untranslated unit key from the units array.',
      ),
      'quantity' => array(
        'type' => 'float',
        'not null' => FALSE,
      ),
      'ingredient_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Ingredient weight within dieta recipe.',
      ),
      'note' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Ingredient processing or notes related to dieta recipe.',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['dieta_recipe_unit'] = array(
    'description' => 'The base table for dieta recipe units.',
    'fields' => array(
      'unit_key' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Untranslated unit key from the units array.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name string.',
      ),
      'plural' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name string.',
      ),
      'abbreviation' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name string.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unit weight.',
      ),
    ),
  );

  return $schema;
}


/**
 * Load the dieta_recipe_units table.
 */
function _dieta_recipe_populate_units() {
  $units = _dieta_recipe_get_default_units();
  foreach ( $units as $u ) {
    db_insert('dieta_recipe_unit')
      ->fields(array(
        'name' => $u['name'],
        'abbreviation' => $u['abbreviation'],
        'metric' => $u['metric'],
        'type' => $u['type'],
        'aliases' => $u['aliases'],
      ))
      ->execute();
  }
  return TRUE;
}


/**
 * Get an array of the default unit values.
 * Used to fill the recipe_unit table.
 */
function _dieta_recipe_get_default_units() {
  $units = array(
    array('name' => 'Slice',               'abbreviation' => 'sli', 'metric' => 0, 'type' => 'Unit', 'aliases' => ''),
    array('name' => 'Unit',                'abbreviation' => '',    'metric' => 0, 'type' => 'Unit', 'aliases' => 'each,ea,whole'),
    array('name' => 'Clove',               'abbreviation' => 'clv', 'metric' => 0, 'type' => 'Unit', 'aliases' => ''),
    array('name' => 'Pinch',               'abbreviation' => 'pn',  'metric' => 0, 'type' => 'Unit', 'aliases' => ''),
    array('name' => 'Package',             'abbreviation' => 'pk',  'metric' => 0, 'type' => 'Unit', 'aliases' => 'pack'),
    array('name' => 'Can',                 'abbreviation' => 'cn',  'metric' => 0, 'type' => 'Unit', 'aliases' => 'jar'),
    array('name' => 'Drop',                'abbreviation' => 'dr',  'metric' => 0, 'type' => 'Unit', 'aliases' => ''),
    array('name' => 'Bunch',               'abbreviation' => 'bn',  'metric' => 0, 'type' => 'Unit', 'aliases' => ''),
    array('name' => 'Dash',                'abbreviation' => 'ds',  'metric' => 0, 'type' => 'Unit', 'aliases' => ''),
    array('name' => 'Carton',              'abbreviation' => 'ct',  'metric' => 0, 'type' => 'Unit', 'aliases' => ''),
    array('name' => 'Cup',                 'abbreviation' => 'c',   'metric' => 0, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Tablespoon',          'abbreviation' => 'T',   'metric' => 0, 'type' => 'Volume', 'aliases' => 'tbsp,tb'),
    array('name' => 'Teaspoon',            'abbreviation' => 't',   'metric' => 0, 'type' => 'Volume', 'aliases' => 'tsp'),
    array('name' => 'Pound',               'abbreviation' => 'lb',  'metric' => 0, 'type' => 'Mass', 'aliases' => ''),
    array('name' => 'Ounce',               'abbreviation' => 'oz',  'metric' => 0, 'type' => 'Mass', 'aliases' => ''),
    array('name' => 'Pint',                'abbreviation' => 'pt',  'metric' => 0, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Quart',               'abbreviation' => 'q',   'metric' => 0, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Gallon',              'abbreviation' => 'gal', 'metric' => 0, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Milligram',           'abbreviation' => 'mg',  'metric' => 1, 'type' => 'Mass', 'aliases' => ''),
    array('name' => 'Centigram',           'abbreviation' => 'cg',  'metric' => 1, 'type' => 'Mass', 'aliases' => ''),
    array('name' => 'Gram',                'abbreviation' => 'g',   'metric' => 1, 'type' => 'Mass', 'aliases' => ''),
    array('name' => 'Kilogram',            'abbreviation' => 'kg',  'metric' => 1, 'type' => 'Mass', 'aliases' => ''),
    array('name' => 'Millilitre',          'abbreviation' => 'ml',  'metric' => 1, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Centilitre',          'abbreviation' => 'cl',  'metric' => 1, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Litre',               'abbreviation' => 'l',   'metric' => 1, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Decilitre',           'abbreviation' => 'dl',  'metric' => 1, 'type' => 'Volume', 'aliases' => ''),
    array('name' => 'Tablespoon (Metric)', 'abbreviation' => 'tbsp', 'metric' => 1, 'type' => 'Volume', 'aliases' => 'T'),
    array('name' => 'Teaspoon (Metric)',   'abbreviation' => 'tsp', 'metric' => 1, 'type' => 'Volume', 'aliases' => 't'),
    array('name' => 'Unknown',             'abbreviation' => 'Unknown', 'metric' => 0, 'type' => 'Unit', 'aliases' => '')
  );
  return $units;
}
